1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. 
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

def my_func(time, rate, prize):
    salary = (time * rate) + prize
    return salary


print("Для рассчета заработной платы сотрудника через Edit Configurations, Terminal или cmd введите 3 параметра: количество отработанных часов, сумму ставки за 1 час и сумму премии.")
from sys import argv
try:
    name, a, b, c = argv
    try:
        a = float(a)
        b = float(b)
        c = float(c)
        print(f"Заработная плата работника составляет {my_func(a, b, c)} у.е.")
    except ValueError:
        print("Как минимум один параметр не является числом. Введите корректные параметры и перезапустите программу.")
except:
    print("Вы ввели неправильное количество параметров (< 3 или > 3). Введите корректные параметры и перезапустите программу.")
    

2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].


# Проба на примере исходного списка
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [my_list[el] for el in range(len(my_list)) if my_list[el] > my_list[el-1] and el > 0]
print(new_list)

# Решение с генератором исходного списка
import random
my_list = list(random.randint(0,300) for i in range(13))
print(my_list)
new_list = [my_list[el] for el in range(len(my_list)) if my_list[el] > my_list[el-1] and el > 0]
print(new_list)



3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.

print([el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0])

4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.


a = int(input("Введите целое положительное число: "))
b = -1 #переменная для сравнения
while a >= 10: #если число < 10, дилять его незачем, а надо сравнить с числом полученным на предыдущем шаге (a > b)
    c = a % 10
    a = a // 10
    if c > b:
        b = c
if a > b:
    print(f"Самая большая цифра в числе: {a}")
else:
    print(f"Самая большая цифра в числе: {b}")
    
    
5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.

from functools import reduce


def my_func(prev_el, el):
    return prev_el * el


print(reduce(my_func, list(i for i in range(100, 1001, 2))))


6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.


# а
from itertools import count
from itertools import islice

for el in islice(count(3),8):
    print(el)
    
    
 # б
from itertools import cycle
my_list = ["ложки", "вилки", "тарелки", "стаканы"]
for el in islice(cycle(my_list), 2 * len(my_list) + 1):
    print(el)
   
   
   
 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
 При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). 
 Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
    
  def fact(factorial):
    for tek_num in range(0, factorial + 1):
        if factorial == 0 or tek_num == 1:
            tek_fact = 1
            yield tek_fact
        elif tek_num == 0:
            tek_fact = 1
        else:
            tek_fact *= tek_num
            yield tek_fact


while True:
    try:
        n = int(input("Введите целое неотрицательное число n для расчёта n!: "))
        if n < 0:
            print("Введенное число должно быть неотрицательным. Попробуйте еще раз.")
        else:
            break
    except ValueError:
        print("Вы должны ввести целое число. Попробуйте еще раз.")
for el in fact(n):
    print(el)




1. Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год». 
В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год 
и преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и года 
(например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.


class Date:
    def __init__(self, day=0, month=0, year=0):
        self.day = day
        self.month = month
        self.year = year

    @classmethod
    def from_string(cls, date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        date1 = cls(day, month, year)
        print(cls, date_as_string)
        return date1

    @staticmethod
    def is_date_valid(date_as_string):
        day, month, year = map(int, date_as_string.split('-'))
        # фильтры: месяцы 31 и 30 дней, февраль 28 дней, високосные года (февраль 29 дней), диапазон 1990 - 2021 гг
        if ((1 <= day <= 31 and (month == 1 or month == 3 or month == 5 or month == 7
                                 or month == 8 or month == 10 or month == 12)and (1990 <= year <= 2021))
            or ((1 <= day <= 28 and month == 2) and (1990 <= year <= 2021)) \
                or (1 <= day <= 30 and (month == 4 or month == 6 or month == 9 or month == 11)
                    and (1990 <= year <= 2021)) \
                or (1 <= day <= 29 and month == 2 and (year == 1992 or year == 1996
                                                       or year == 2000 or year == 2004
                                                       or year == 2008 or year == 2012
                                                       or year == 2016 or year == 2020)) \
                or (1 <= day <= 28 and month == 2 and (year == 1990 or year == 1991 or year == 1993
                                                       or year == 1994 or year == 1995 or year == 1997
                                                       or year == 1999 or year == 2001 or year == 2002
                                                       or year == 2003 or year == 2005 or year == 2006
                                                       or year == 2007 or year == 2009 or year == 2010
                                                       or year == 2011 or year == 2013 or year == 2014
                                                       or year == 2015 or year == 2017 or year == 2018
                                                       or year == 2019 or year == 2021))):
            print('Дата введена верно')
        else:
            print('Ошибка ввода данных')

d = '21-02-2021'
date2 = Date.from_string(d)
is_date = Date.is_date_valid(d)
d2 = '44-02-2021'
date2 = Date.from_string(d2)
is_date = Date.is_date_valid(d2)
d3 = '21-13-2021'
date2 = Date.from_string(d3)
is_date = Date.is_date_valid(d3)
d4 = '29-02-2021'
date2 = Date.from_string(d4)
is_date = Date.is_date_valid(d4)
d5 = '28-02-2021'
date2 = Date.from_string(d5)
is_date = Date.is_date_valid(d5)
d6 = '29-02-1992'
date2 = Date.from_string(d6)
is_date = Date.is_date_valid(d6)
d7 = '29-02-1993'
date2 = Date.from_string(d7)
is_date = Date.is_date_valid(d7)
d7 = '01-01-1000'
date2 = Date.from_string(d7)
is_date = Date.is_date_valid(d7)
d8 = '04-01-1000'
date2 = Date.from_string(d8)
is_date = Date.is_date_valid(d8)

2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль. Проверьте его работу на данных, вводимых пользователем. 
При вводе пользователем нуля в качестве делителя программа должна корректно обработать эту ситуацию и не завершиться с ошибкой.


class MyOwnErr(Exception):
    def __init__(self, txt):
        self.txt = txt

div1 = input('Введите делимое: ')
div2 = input('Введите делитель: ')

try:
    div1 = int(div1)
    div2 = int(div2)
    if div2 == 0:
        raise MyOwnErr('На ноль делить нельзя!')
except ValueError:
    print('Вы ввели не число!')
except MyOwnErr as err:
    print(err)
else:
    print(int(div1) / int(div2))


3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. 
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список. 
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, 
команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента необходимо 
реализовать проверку типа элемента и вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст 
(не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.


class MyOwnErr(Exception):
    def __init__(self, txt):
        self.txt = txt
list = []
alphabet_float = set("-.1234567890")
while True:
    num = input("Введите число либо стоп-символ 'q' для завершения работы программы: ")
    try:
        if num == '':
            raise MyOwnErr('Вы ничего не ввели!')
        if num == 'q':
            raise MyOwnErr('Вы нажали стоп-символ.')
        for one_char in num:
            if (not one_char.isnumeric() and len(num) < 2)\
                    or (one_char == "-" and (num.index(one_char) > 0 or num.count(one_char) > 1))\
                    or (one_char == "." and num.count(one_char) > 1)\
                    or one_char not in alphabet_float:
                raise MyOwnErr('Вы ввели не число!')
    except MyOwnErr as err:
            print(err)
            print(list)
            if num == 'q':
                break
    else:
        list.append(float(num))
        print(list)


4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад. А также класс «Оргтехника», который будет базовым 
для классов-наследников. Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс). В базовом классе определить параметры, 
общие для приведенных типов. В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.
5. Продолжить работу над первым заданием. Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании. 
Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру, например словарь.
6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных. Например, для указания количества принтеров,
отправленных на склад, нельзя использовать строковый тип данных.
Подсказка: постарайтесь по возможности реализовать в проекте «Склад оргтехники» максимум возможностей, изученных на уроках по ООП.

from pprint import pprint


class MyOwnErr(Exception):
    def __init__(self, txt):
        self.txt = txt


class Store:
    def __init__(self):
        self.dict = {}

    def to_store(self, goods):
        return self.dict.setdefault(goods.__class__.__name__, []).append(goods.__dict__)

    def extract(self, good_name, dept_name):
        flag = False
        for key in self.dict.keys():
            if key == good_name:
                del self.dict[key]
                print(f'Товар {good_name} отправлен в отдел {dept_name}')
                break
            for i in range(len(self.dict[key]) - 1, -1, -1):
                if self.dict[key][i]['name'] == good_name:
                    extract_class = key
                    del self.dict[key][i]
                    flag = True
        if flag:
            print(f'Товар {good_name} класса {extract_class} отправлен в отдел {dept_name}')
        else:
            print('Запрашиваемый товар не найден на складе')
        self.dict = {k: v for k, v in self.dict.items() if not len(v) < 1}


class Equipment:
    def __init__(self, name, price, quantity, date_of_man, term):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.date_of_man = date_of_man
        self.term = term


class Printers(Equipment):
    def __init__(self, name, price, quantity, date_of_man, term, ink): # ink - чернила
        super().__init__(name, price, quantity, date_of_man, term)
        self.ink = ink


class Scanners(Equipment):
    def __init__(self, name, price, quantity, date_of_man, term, res): # res - разрешение
        super().__init__(name, price, quantity, date_of_man,term)
        self.res = res


class Xeroxes(Equipment):
    def __init__(self, name, price, quantity, date_of_man, term, form): # form - формат бумаги
        super().__init__(name, price, quantity, date_of_man, term)
        self.form = form


s = Store()
while True:
    try:
        main_menu = input("1 - добавить товар на склад\n"
                          "2 - отправить товар со склада в подразделение компании\n"
                          "3 - показать товары на складе\n"
                          "4 - выйти\n→ ")
        if not main_menu.isnumeric():
            raise MyOwnErr('Введите 1, 2, 3 или 4')
        else:
            if int(main_menu) < 1 or int(main_menu) > 4:
                raise MyOwnErr('Введите 1, 2, 3 или 4')
    except MyOwnErr as err:
        print(err)
    else:
        main_menu = int(main_menu)
        if main_menu == 1:
            while True:
                try:
                    menu_add = input("1 - добавить принтеры\n"
                                     "2 - добавить сканеры\n"
                                     "3 - добавить ксероксы\n"
                                     "4 - вернуться в основное меню\n → ")
                    if not menu_add.isnumeric():
                        raise MyOwnErr('Введите 1, 2, 3 или 4')
                    else:
                        if int(menu_add) < 1 or int(menu_add) > 4:
                            raise MyOwnErr('Введите 1, 2, 3 или 4')
                except MyOwnErr as err:
                    print(err)
                else:
                    menu_add = int(menu_add)
                    if menu_add == 1 or menu_add == 2 or menu_add == 3:
                        while True:
                            name = input(f'Введите название модели: ')
                            try:
                                if name == '':
                                    raise MyOwnErr('Вы ничего не ввели!')
                            except MyOwnErr as err:
                                print(err)
                            else:
                                break
                        alphabet_price = set(".1234567890")
                        while True:
                            price = input(f'Введите цену: ')
                            try:
                                if price == '':
                                    raise MyOwnErr('Вы ничего не ввели!')
                                for one_char in price:
                                    if (not one_char.isnumeric() and len(price) < 2) \
                                            or (one_char == "." and price.count(one_char) > 1) \
                                            or one_char not in alphabet_price:
                                        raise MyOwnErr('Цена должна задаваться неотрицательным числом')
                            except MyOwnErr as err:
                                print(err)
                            else:
                                price = float(price)
                                break
                        while True:
                            quantity = input(f'Введите количество: ')
                            try:
                                if quantity == '':
                                    raise MyOwnErr('Вы ничего не ввели!')
                                if not quantity.isnumeric():
                                    raise MyOwnErr('Количество должно задаваться целым числом')
                                if int(quantity) == 0:
                                    raise MyOwnErr('Количество должно быть положительным')
                            except MyOwnErr as err:
                                print(err)
                            else:
                                quantity = int(quantity)
                                break
                        while True:
                            date_of_man = input(f'Введите год прозводства: ')
                            try:
                                if date_of_man == '':
                                    raise MyOwnErr('Вы ничего не ввели!')
                                if not len(date_of_man) == 4:
                                    raise MyOwnErr('Год вводится в четырёхзначном формате')
                                if not date_of_man.isnumeric():
                                    raise MyOwnErr('Год должен задаваться целым числом')
                                if int(date_of_man) < 1990:
                                    raise MyOwnErr('Год производства не может быть меньше 1990 года')
                            except MyOwnErr as err:
                                print(err)
                            else:
                                date_of_man = int(date_of_man)
                                break
                        while True:
                            term = input(f'Введите срок службы (кол-во лет): ')
                            try:
                                if term == '':
                                    raise MyOwnErr('Вы ничего не ввели!')
                                if not term.isnumeric():
                                    raise MyOwnErr('Срок службы должен задаваться целым числом')
                                if int(term) == 0:
                                    raise MyOwnErr('Срок службы должен быть положительным')
                            except MyOwnErr as err:
                                print(err)
                            else:
                                term = int(term)
                                break
                        if menu_add == 1:
                            while True:
                                try:
                                    menu_ink = input("Чернила: 1 - чёрные, 2 - цветные\n")
                                    if not menu_ink.isnumeric():
                                        raise MyOwnErr('Введите 1 или 2')
                                    else:
                                        if int(menu_ink) != 1 and int(menu_ink) != 2:
                                            raise MyOwnErr('Введите 1 или 2')
                                except MyOwnErr as err:
                                    print(err)
                                else:
                                    menu_ink = int(menu_ink)
                                    if menu_ink == 1:
                                        ink = 'ЧБ'
                                    elif menu_ink == 2:
                                        ink = 'RGB'
                                    break
                            new_printer = Printers(name, price, quantity, date_of_man, term, ink)
                            s.to_store(new_printer)
                        elif menu_add == 2:
                            while True:
                                try:
                                    menu_res = input("Разрешение: 1 - 6400x9600, 2 - 600x1200\n")
                                    if not menu_res.isnumeric():
                                        raise MyOwnErr('Введите 1 или 2')
                                    else:
                                        if int(menu_res) != 1 and int(menu_res) != 2:
                                            raise MyOwnErr('Введите 1 или 2')
                                except MyOwnErr as err:
                                    print(err)
                                else:
                                    menu_res = int(menu_res)
                                    if menu_res == 1:
                                        res = '6400x9600'
                                    elif menu_res == 2:
                                        res = '600x1200'
                                    break
                            new_scanner = Scanners(name, price, quantity, date_of_man, term, res)
                            s.to_store(new_scanner)
                        elif menu_add == 3:
                            while True:
                                try:
                                    menu_form = input("Формат бумаги: 1 - A3, 2 - A4\n")
                                    if not menu_form.isnumeric():
                                        raise MyOwnErr('Введите 1 или 2')
                                    else:
                                        if int(menu_form) != 1 and int(menu_form) != 2:
                                            raise MyOwnErr('Введите 1 или 2')
                                except MyOwnErr as err:
                                    print(err)
                                else:
                                    menu_form = int(menu_form)
                                    if menu_form == 1:
                                        form = 'A3'
                                    elif menu_form == 2:
                                        form = 'A4'
                                    break
                            new_xerox = Xeroxes(name, price, quantity, date_of_man, term, form)
                            s.to_store(new_xerox)
                    elif menu_add == 4:
                        break
        elif main_menu == 2:
            if s.dict != {}:
                while True:
                    print('Введите пункт назаначения:')
                    try:
                        menu_destination = input("1 - бухгалтерия\n"
                                                 "2 - руководство\n"
                                                 "3 - цех\n")
                        if not menu_destination.isnumeric():
                            raise MyOwnErr('Введите 1, 2 или 3')
                        else:
                            if int(menu_destination) < 1 and int(menu_destination) > 3:
                                raise MyOwnErr('Введите 1, 2 или 3')
                    except MyOwnErr as err:
                        print(err)
                    else:
                        menu_destination = int(menu_destination)
                        if menu_destination == 1:
                            dept_name = 'Бухгалтерия'
                        elif menu_destination == 2:
                            dept_name = 'Руководство'
                        elif menu_destination == 3:
                            dept_name = 'Цех'
                        break
                while True:
                    name = input('Введите товар для отправки: ')
                    try:
                        flag = False
                        for key in s.dict.keys():
                            if key == name:
                                flag = True
                            for i in range(len(s.dict[key])):
                                if s.dict[key][i]['name'] == name:
                                    flag = True
                        if not flag:
                            raise MyOwnErr('На складе нет указанного товара для отправки')
                    except MyOwnErr as err:
                        print(err)
                    else:
                        good_name = name
                        break
                s.extract(good_name, dept_name)
            else:
                print('Склад пуст, невозможно отправить товар')
        elif main_menu == 3:
            if s.dict == {}:
                print('Склад пуст')
            else:
                pprint(s.dict, width=20)
        elif main_menu == 4:
            break


7. Реализовать проект «Операции с комплексными числами». Создайте класс «Комплексное число», реализуйте перегрузку методов сложения и умножения 
комплексных чисел. Проверьте работу проекта, создав экземпляры класса (комплексные числа) и выполнив сложение и умножение созданных экземпляров. 
Проверьте корректность полученного результата.



class Nums:
    def __init__(self, num):
        self.num = num

    def __str__(self):
        return f"{self.num}"

    def __add__(self, other):
        return Nums(self.num + other.num)

    def __sub__(self, other):
        return Nums(self.num - other.num)

    def __mul__(self, other):
        return Nums(self.num * other.num)

c = Nums(2)
d = Nums(3)
e = Nums(5)
f = Nums(8)
print('Способ сложения и умножения комплексных чисел')
print(f'(2+5j) + (3+8j) = {c + d}+{e + f}j')
print(f'(2+5j) * (3+8j) = {c * d - e * f}+{e * d + c * f}j')

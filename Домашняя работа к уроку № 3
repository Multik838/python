
Домашняя работа к уроку № 3
# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
def division_two_argument(arg_one, arg_two):
    """"Делимое – это то целое число, которое делят. Делитель – это целое число, на которое делят.
Результатом такой операции является частное."""
    print(division_two_argument.__doc__)

    while arg_two == 0:
        print("Введите делитель не равный 0:  ")
        arg_two = int(input("Введите делитель: "))
        return arg_one // arg_two
        if arg_two < 0:
            return arg_one // arg_two
        elif arg_two > 0:
            return arg_one // arg_two

arg_one = int(input("Введите делимое:  "))
arg_two = int(input("Введите делитель:  "))

res = division_two_argument(arg_one, arg_two)
print("result", res)

# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.

def make_anketa(name=None, surname=None,year=None, city=None, email=None, telephone=None):
   return name, surname,year, city, email, telephone
name = str(input('Введите ваше имя: '))
surname = str(input('Введите ваше фамилию: '))
year = int(input('Введите дату рождения ДДММГГГГ: '))
city = str(input('Введите город проживания: '))
email = str(input('Введите ваш email: '))
telephone = int(input('Введите ваш номер в формате +7:'))
res = make_anketa(name, surname, year, city, email, telephone)
print('', res)

# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента,
# и возвращает сумму наибольших двух аргументов.

def my_func(arg1, arg2, arg3):
    if arg1 >= arg3 and arg2 >= arg3:
        return arg1 + arg2
    elif arg1 > arg2 and arg1 <= arg3:
        return arg1 + arg3
    else:
        return arg2 + arg3

print('Вводимые значения должно быть целыми числами. Пример: 1 7 7')
arg1 = int(input("Введите значение первого аргумента: "))
arg2 = int(input("Введите значение второго аргумента: "))
arg3 = int(input("Введите значение третьего аргумента: "))

max_sum_arg = my_func(arg1, arg2, arg3)

print('Result', max_sum_arg)

# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y.
# Задание необходимо реализовать в виде функции my_func(x, y).
# При решении задания необходимо обойтись без встроенной функции возведения числа в степень.

def my_func(a, n):
    return a ** abs(n)
    if n == 0:
        print('НЕТ')
    else:
        return a ** abs(n)
print(f'Result {pow(int(input("Введите значение первого аргумента: ")),(int(input("Введите значение второго аргумента: "))))}')



def my_fun1(x, y):
    while y == 0:
        print('Значение не может быть 0')
        y = int(input("Введите значение второго аргумента: "))
        return pow(x, y)
    if y < 0:
        return pow(x, y)
    elif y > 0:
        return pow(x, y)
x = int(input("Введите значение первого аргумента: "))
y = int(input("Введите значение второго аргумента: "))
ans = my_fun1(x, y)
print(ans)


# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел,
# разделенных пробелом и снова нажать Enter.
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введен после нескольких чисел,
# то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

def my_sum ():
    sum_res = 0
    ex = False
    while ex == False:
        number = input('Input numbers or Q for quit - ').split()

        res = 0
        for el in range(len(number)):
            if number[el] == 'q' or number[el] == 'Q':
                ex = True
                break
            else:
                res = res + int(number[el])
        sum_res = sum_res + res
        print(f'Current sum is {sum_res}')
    print(f'Your final sum is {sum_res}')

my_sum()

Домашнее задание к уроку № 4

"""Задание 4.1
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. 
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами."""

def bonus_kvartal(time, salary, bonus):
    return (time * salary) + bonus


time = int(input("Введите выработку в часах: "))
salary = int(input("Введите ставку в час: "))
bonus = int(input("Укажите размер премии: "))
kvartal: int = (time * salary) + bonus
print(kvartal)

from bonus import bonus_kvartal

print(bonus_kvartal)

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
for el in range(1, len(my_list)):
    if my_list[el] > my_list[el - 1]:
        print(my_list[el])

"""Задание 4.2

Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123]."""

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
my_new_list = []
for el in range(1, len(my_list)):
    if my_list[el] > my_list[el - 1]:
        my_new_list.append(my_list[el])
print(f'Исходный список {my_list}')
print(f'Новый список {my_new_list}')

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
my_new_list = [my_list[el] for el in range(1, len(my_list)) if my_list[el] > my_list[el-1]]
print(f'Исходный список {my_list}')
print(f'Новый список {my_new_list}')

"""Задание 4.3
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор."""

my_list = range(20, 240)
my_new_list = [my_list[el] for el in range(len(my_list)) if my_list[el] % 20 == 0 or my_list[el] % 21 == 0]
print(f'Исходный список {my_list}')
print(f'Новый список {my_new_list}')


"""Задание 4.4
Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]"""

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
for i in range(len(my_list)):
    if my_list.count(my_list[i]) == 1:
        print(my_list[i])


"""Задание 4.5
Реализовать формирование списка, используя функцию range() и возможности генератора.
 В список должны войти четные числа от 100 до 1000 (включая границы). 
 Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce()."""

from functools import reduce


def my_func(el_p, el):
    return el_p * el


print(f'Список четных значений {[el for el in range(99, 1001) if el % 2 == 0]}')
print(f'Результат перемножения всех элементов списка {reduce(my_func, [el for el in range(99, 1001) if el % 2 == 0])}')

Домашнее задание к уроку № 5
"""Задание 5.1
Создать программно файл в текстовом формате, записать в него построчно данные, вводимые пользователем. 
Об окончании ввода данных свидетельствует пустая строка."""


f_obj = open("test1.txt", "w")
while True:
    f_obj.write = input("Введите текст:")
    if f_obj.write == " ":
        break
f_obj.close()

"""Задание 5.2
Создать текстовый файл (не программно), сохранить в нем несколько строк, выполнить подсчет количества строк, количества слов в каждой строке.""'


my_f = open(r"C:\Users\Евген\Desktop\Hokku.txt", "r")
print("Количество строк:")
content = my_f.readlines()

print(len(content))

my_f2 = open(r"C:\Users\Евген\Desktop\Hokku.txt", "r")
print("Количество слов в каждой строке:")
line: str
for line in my_f2:
    print(len(set(line.split())))

my_f2.close()

my_f.close()

"""Задание 5.6
Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет и наличие лекционных, практических и лабораторных занятий по этому предмету и их количество. Важно, чтобы для каждого предмета не обязательно были все типы занятий. 
Сформировать словарь, содержащий название предмета и общее количество занятий по нему."""
import json
subj = {}
with open('file_6.txt', 'r') as init_f:
    for line in init_f:
        subject, lecture, practice, lab = line.split()
        subj[subject] = int(lecture) + int(practice) + int(lab)
    print(f'Общее количество часов по предмету - \n {subj}')

Домашнее задание к уроку № 6
"""Задание 6.1
Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод running (запуск). 
Атрибут реализовать как приватный. В рамках метода реализовать переключение светофора в режимы: красный, желтый, зеленый. 
Продолжительность первого состояния (красный) составляет 7 секунд, второго (желтый) — 2 секунды, третьего (зеленый) — на ваше усмотрение. 
Переключение между режимами должно осуществляться только в указанном порядке (красный, желтый, зеленый). 
Проверить работу примера, создав экземпляр и вызвав описанный метод."""
import time
class TrafficLight:
    _color = None
    _colors = ['red', 'yellow', 'green']

    def __init__(self):
        self._color = self._colors[0]

    def running(self):
        i=0
        while i<5:
            for el in TrafficLight._colors :
                print(el)
                i+=1
                time.sleep(1)

traffic = TrafficLight()
traffic.running()